<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL-学习笔记</title>
      <link href="/92pureMilk/92pureMilk.github.io/2022/11/15/MySQL-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/92pureMilk/92pureMilk.github.io/2022/11/15/MySQL-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>需先安装MySQL数据库</p><p><a href="https://www.mysql.com/">MySQL官方网站</a></p><hr><h4 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h4><ol><li>传统型数据库（关系型数据库&#x2F;SQL数据库）</li><li>新型数据库（非关系型数据库&#x2F;NoSQL数据库）</li></ol><p>MySQL、Oracle、SQL Server都是传统型，Mongodb是新型</p><p>新型对传统型是弥补的关系，并不是替代，有时候两个都用</p><h4 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h4><p>增删改查(insert、delete、update、select)</p><ul><li><p>select:</p><p><code>SELECT * FROM 表名称</code> </p><p>从指定的表中查询所有的数据  *表示所有列</p><p><code>SELECT 列名称 FROM 表名称</code> </p><p>从指定的表中查询指定的列</p></li><li><p>insert</p><p><code>INSERT INTO 表名称(列名称1,列名称2,...) VALUES(值1,值2,...)</code> </p><p>向指定的表中插入列1，列2，…，列与值一一对应</p></li><li><p>update</p><p><code>UPDATE 表名称 SET 列名称=新值 WHERE 列名称=某值</code></p><p>修改指定表里的指定列的值</p><p>eg: </p><p><code>UPDATE users SET password=&#39;111111&#39; WHERE id=2</code></p><p>修改users表id为2的password值改为111111</p></li><li><p>delete</p><p><code>DELETE FROM 表名称 WHERE 列名称=某值</code></p><p>删除指定表里的指定行</p><p>eg:</p><p><code>DELETE FROM users WHERE id=6</code></p><p>删除id为6的的一整行</p></li></ul><p>条件语句(where、and、or)</p><ul><li><p>where</p><p>限定选择的标准</p><p><code>SELECT 列名称 FROM 表名称 WHERE 列 运算符 值</code></p><p><code>UPDATE 表名称 SET 列名称=新值 WHERE 列 运算符 值</code></p><p><code>DELETE FROM 表名称 WHERE 列 运算符 值</code></p></li><li><p>and</p><p>同时满足多个条件</p><p>eg:</p><p><code>DELETE FROM users WHERE id&gt;8 AND status=0</code></p><p>删除users表中id大于8且status&#x3D;0的行</p></li><li><p>or</p><p>满足任意一个条件</p><p>eg:</p><p><code>SELECT * FROM users WHERE username=&#39;zs&#39; OR status=0</code></p><p>显示所有username&#x3D;’zs’或者status&#x3D;0的用户</p><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>order by</p><p>eg:</p><p>升序排序：</p><p><code>SELECT * FROM users ORDER BY status ASC</code></p><p><code>SELECT * FROM users ORDER BY status</code> </p><p> (order by默认是升序排序，所以asc可省略不写)</p><p>查找users表中所有的列，并按照status字段进行升序排序</p><p>降序排序：</p><p><code>SELECT * FROM users ORDER BY status DESC</code></p><p>查找users表中所有的列，并按照status字段进行降序排序</p><p>多重排序：</p><p><code>SELECT * FROM users ORDER BY status DESC, username ASC</code></p><p>查找users表中所有的列，先按照status字段进行降序排序，再按照username字段进行升序排序</p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>count(*)</p><p><code>SELECT COUNT(*) FROM 表名称</code></p><p>返回查询结果的总数据条数</p><h4 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h4><p>as</p><p>eg:</p><p><code>SELECT COUNT(*) AS total FROM users WHERE status=0</code></p><p>返回查询的users表中status&#x3D;0的总数据条数并设置别名为total</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-学习笔记</title>
      <link href="/92pureMilk/92pureMilk.github.io/2022/11/14/git-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/92pureMilk/92pureMilk.github.io/2022/11/14/git-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>需先安装git</p><p><a href="https://git-scm.com/">git官方网站</a></p><p>设置用户签名：</p><p>git config –global user.name 用户名</p><p>git config –global user.email 邮箱</p><hr><h3 id="初识git"><a href="#初识git" class="headerlink" title="初识git"></a>初识git</h3><p>Git是一个免费和开源分布式版本控制系统，旨在快速高效地处理从小到大的各种项目。</p><h3 id="常用git命令"><a href="#常用git命令" class="headerlink" title="常用git命令"></a>常用git命令</h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git -v</td><td>查看所安装的node的版本号</td></tr><tr><td>git init</td><td>初始化本地库</td></tr><tr><td>git status</td><td>查看本地库状态</td></tr><tr><td>git add 文件名</td><td>添加到暂存区</td></tr><tr><td>git commit -m “日志信息” 文件名</td><td>提交到本地库</td></tr><tr><td>git reflog</td><td>查看历史记录</td></tr><tr><td>git reset –hard 版本号</td><td>版本穿梭</td></tr><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git branch -v</td><td>查看分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>把指定的分支合并到当前分支</td></tr><tr><td>git remote -v</td><td>查看当前所有的远程库地址的别名</td></tr><tr><td>git remote add 别名 远程库地址</td><td>给远程库起一个别名</td></tr><tr><td>git push 别名&#x2F;远程库地址 分支</td><td>推送本地库分支上的内容到远程库</td></tr><tr><td>git clone 别名&#x2F;远程库地址</td><td>将远程库的内容克隆到本地</td></tr><tr><td>git pull 别名&#x2F;远程库地址 远程分支名</td><td>将远程库对于分支最新内容拉取后与当前本地库分支合并</td></tr></tbody></table><h3 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a>项目流程</h3><h4 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h4><ol><li><p>新建项目</p></li><li><p>要管理项目需在项目文件夹内初始化git <code>git init</code> 生成.git目录</p></li><li><p>查看本地库状态<code>git status</code> 处于master&#x2F;main 分支</p></li><li><p>文件改好后添加到暂存区<code>git add 文件名</code> （暂存区文件不会保存历史版本，可删 <code>git rm --cached 文件名</code>）</p></li><li><p>将暂存区文件提交到本地库 <code>git commit -m &quot;日志信息&quot; 文件名</code></p><p>eg: <code>git commit -m &quot;first commit&quot; test.txt</code></p></li><li><p>提交前后可以查看提交历史记录<code>git reflog</code></p></li><li><p>修改不同版本文件需要使用版本穿梭<code>git reset --hard 版本号</code>HEAD指针指向穿梭版本号</p></li><li><p>项目完成通常有一个主分支上线供客户使用，如果后续要增加功能或优化更新等操作我们就需要建立一个新的分支，在新分支上进行代码开发优化更新</p></li><li><p>首先我们需要创建分支<code>git branch 分支名</code></p></li><li><p>然后我们需要切换到创建的分支上进行代码开发<code>git checkout 分支名</code></p></li><li><p>通常一个项目内会有多个分支，修改更新要切换到自己要修改的分支，我们可以先查看所有分支<code>git branch -v</code></p></li><li><p>更新好新版本后我们需要将新版本与客户正使用的旧版本进行合并</p></li><li><p>合并分支先切换到主分支，运行<code>git merge 分支名</code>将指定的分支与主分支合并</p></li><li><p>合并分支是将有修改的文件覆盖没有修改的文件，若两个文件都作了修改可能会导致合并冲突，需要手动选择是哪个文件覆盖哪个文件</p></li></ol><h4 id="团队内"><a href="#团队内" class="headerlink" title="团队内"></a>团队内</h4><ol><li>A将项目从本地库push到A的代码托管中心(远程库 github&#x2F;gitee)</li><li>B将项目从A的远程库clone到本地库</li><li>B修改后将项目从本地库push到A的远程库(需A给B权限加入到项目成员)</li><li>A将B修改后的项目从A的远程库pull到本地库</li></ol><h4 id="跨团队"><a href="#跨团队" class="headerlink" title="跨团队"></a>跨团队</h4><ol><li>团队A将项目从团队A本地库push到团队A的代码托管中心(远程库 github&#x2F;gitee)</li><li>团队B将项目从团队A的远程库fork到团队B的远程库</li><li>团队B将项目从团队B的远程库clone到团队B的本地库</li><li>团队B修改后将项目从团队B本地库push到团队B的远程库</li><li>团队B向团队A发送pull request后经团队A审核通过后merge到团队A的远程库</li><li>团队A将项目从团队A的远程库pull到团队A的本地库</li></ol><h3 id="SSH免密登入"><a href="#SSH免密登入" class="headerlink" title="SSH免密登入"></a>SSH免密登入</h3><ol><li><p>生成ssh密钥</p><p><code>ssh-keygen -t rsa -C 邮件地址</code> </p><p>输入命令后敲四次回车键</p><p>之后会在系统磁盘用户目录下生成.ssh文件</p><p>文件内有一个私钥文件id_rsa 一个公钥文件id_rsa.pub</p><p>公钥里的内容全部复制下来后在远程库ssh添加密钥</p></li><li><p>通过远程库的ssh链接拉取项目</p><p><code>git pull ssh链接</code></p><p>输入命令后要输一次yes</p></li><li><p>通过远程库的ssh链接推送项目</p><p><code>git push ssh链接 分支</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 程序员必备技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node-学习笔记</title>
      <link href="/92pureMilk/92pureMilk.github.io/2022/11/14/node-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/92pureMilk/92pureMilk.github.io/2022/11/14/node-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>需先安装node.js</p><p><a href="https://nodejs.org/en/">node.js官方网站</a></p><hr><h3 id="初识node"><a href="#初识node" class="headerlink" title="初识node"></a>初识node</h3><blockquote><p>Node.js® 是一个基于 Chrome V8 引擎 的 JavaScript 运行环境</p></blockquote><h3 id="node终端命令"><a href="#node终端命令" class="headerlink" title="node终端命令"></a>node终端命令</h3><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>node -v</td><td>查看所安装的node的版本号</td></tr><tr><td>node 文件名称</td><td>将文件放入node环境运行</td></tr></tbody></table><p>npm包管理工具:</p><p>npm包管理工具随着node.js的安装包一起被安装到了用户的电脑上；</p><p>[npm官方][<a href="https://www.npmjs.com/]">https://www.npmjs.com/]</a> 可以搜索想要的包和查看使用方法；</p><p>下载包需要去官方服务器<a href="https://registry.npm.org/%EF%BC%9B">https://registry.npm.org/；</a></p><p>也可以去淘宝镜像源下包<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org/</a></p><table><thead><tr><th>常用命令</th><th>作用</th></tr></thead><tbody><tr><td>npm -v</td><td>查看所安装的npm包管理工具的版本号</td></tr><tr><td>npm i</td><td>安装所有依赖的包</td></tr><tr><td>npm i 包名</td><td>安装指定的包的最新版本</td></tr><tr><td>npm i 包名@版本号</td><td>安装指定的包的指定的具体版本</td></tr><tr><td>npm i 包名 -g</td><td>在全局安装指定的包</td></tr><tr><td>npm i 包名 -D</td><td>安装指定的包并记录到devDependencies节点中（devDependencies 开发依赖包， dependencies 核心依赖包）</td></tr><tr><td>npm uninstall 包名</td><td>卸载指定的包</td></tr><tr><td>npm init</td><td>初始化</td></tr><tr><td>npm init -y</td><td>初始化并创建package.json文件</td></tr><tr><td>npm config get registry</td><td>查看当前下包的镜像源</td></tr><tr><td>npm config set registry&#x3D;镜像源地址</td><td>切换当前下包的镜像源</td></tr><tr><td>npm login</td><td>登入包</td></tr><tr><td>npm publish</td><td>发布包</td></tr><tr><td>npm unpublish</td><td>删除包(上传72小时内才可删除)</td></tr></tbody></table><p>切换镜像源小工具nrm:</p><p><code>npm i nrm -g</code>全局安装nrm；</p><p> <code>nrm ls</code>查看所有可用镜像源；</p><p> <code>nrm use 镜像源名</code> 切换镜像源。</p><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>模块通常也叫作包，分为node内置模块，第三方模块，自定义模块 三种。</p><p>内置模块与第三方模块的引入方式是一样的，都是<code>require(&#39;模块名称&#39;)</code>；</p><p>自定义模块引入方式是<code>require(&#39;模块相对路径&#39;)</code>相对路径以.&#x2F;或..&#x2F;开头;</p><p>引入模块的机制是：若请求的是模块名称，则先从内置找，找不到则找安装的第三方模块(从当前文件目录开始找&#x2F;node_modules文件夹加载第三方模块，找不到则移动到上一层父目录找直到文件系统的根目录)；若请求的是自定义模块，则按请求路径找。</p><p>fs模块与http模块为node内置模块。</p><h3 id="fs文件系统模块"><a href="#fs文件系统模块" class="headerlink" title="fs文件系统模块"></a>fs文件系统模块</h3><ol><li><p><strong>引入模块</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>使用模块</strong></p><ol><li><p>读文件</p><p>fs.readFile(‘path’, ‘encode’, function(err, data){})</p><p>fs.readFile(‘文件路径’, ‘编码’, 回调函数)</p><p>eg:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./test.txt&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, data</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;failed！&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>)    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>写文件</p><p>fs.writeFile(‘path’, ‘content’, function(err){})</p><p>fs.writeFile(‘文件路径’, ‘要写入的内容’, 回调函数)</p><p>eg:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./test.txt&#x27;</span>, <span class="string">&#x27;Hello Nodejs&#x27;</span>, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;failed!&#x27;</span> + err.<span class="property">message</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success!&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h3><ol><li><p><strong>引入模块</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>使用模块</strong></p><p>eg:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建 web 服务器实例</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//为服务器实例绑定 request 事件，监听客户端的请求</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> url = req.<span class="property">url</span></span><br><span class="line">  <span class="keyword">const</span> method = req.<span class="property">method</span></span><br><span class="line">  <span class="keyword">const</span> str = <span class="string">`Your request url is <span class="subst">$&#123;url&#125;</span>, and request method is <span class="subst">$&#123;method&#125;</span>`</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line">  <span class="comment">//设置 Content-Type 响应头，解决中文乱码的问题</span></span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;test/html; charset=utf-8&#x27;</span>)</span><br><span class="line">  <span class="comment">// 向客户端响应内容</span></span><br><span class="line">  res.<span class="title function_">end</span>(str)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//启动web服务器，监听80端口</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">80</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h3><p>express模块</p><p>安装express模块</p><p><code>npm i express</code></p><p>eg:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入express模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动web服务器，监听80端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>eg:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入express模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">//挂载get请求路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/index&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;get请求&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//挂载post请求路由</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/index&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;post请求&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//启动web服务器，监听80端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>路由的模块化：</p><p>创建一个路由模块router.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入express模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//创建路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"><span class="comment">//挂载具体的路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/index&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;get请求&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/index&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;post请求&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//向外导出路由对象</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br></pre></td></tr></table></figure><p>使用创建的路由模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入express模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">//导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./router&#x27;</span>)</span><br><span class="line"><span class="comment">//注册路由模块</span></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"><span class="comment">//启动web服务器，监听80端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>中间件比路由多个next，执行完中间件后必须next()，否则会终止请求</p><p>请求—&gt;中间件—&gt;路由—&gt;响应</p><p>全局中间件：</p><p>eg:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入express模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">//定义第一个全局中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//获取请求到达服务器的时间</span></span><br><span class="line">    <span class="keyword">const</span> time = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    <span class="comment">//为req对象挂载自定义属性，从而把时间共享给后面所有的路由</span></span><br><span class="line">    req.<span class="property">startTime</span> = time</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//定义第二个全局中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//输出共享的对象挂载的自定义属性startTime</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">startTime</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//挂载的路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/index&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;get请求&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/index&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;post请求&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//启动web服务器，监听80端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>局部中间件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入express模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">//创建web服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">//定义局部中间件mw1</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mw1</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;局部中间件mw1&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义局部中间件mw2</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mw2</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;局部中间件mw2&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义局部中间件mw3</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mw3</span> = (<span class="params">req, res, next</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;局部中间件mw&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//挂载的路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/index&#x27;</span>, mw1, mw2, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;get请求&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/index&#x27;</span>, mw3, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;post请求&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//启动web服务器，监听80端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo建站-学习笔记</title>
      <link href="/92pureMilk/92pureMilk.github.io/2022/11/14/Hexo-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%BB%BA%E7%AB%99/"/>
      <url>/92pureMilk/92pureMilk.github.io/2022/11/14/Hexo-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%BB%BA%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<p>需先掌握的知识点：node npm git github gitee Markdown</p><hr><h1 id="一：建项目"><a href="#一：建项目" class="headerlink" title="一：建项目"></a>一：建项目</h1><p>   新建项目文件夹</p><ol><li><p><strong>安装Hexo:</strong></p><p><code>npm install hexo-cli</code></p><p>项目内安装或全局安装都可</p><p>全局安装 <code>npm install hexo-cli -g</code></p></li><li><p><strong>初始化</strong></p><p><code>hexo init</code></p></li><li><p><strong>导包</strong></p><p><code>npm install</code></p></li><li><p><strong>打开运行网站</strong></p><ol><li><code>hexo c</code>   清理缓存</li><li><code>hexo g</code>   生成静态文件</li><li><code>hexo d</code>   部署网站(若生成静态文件时使用命令<code>hexo g -d</code> 则不再需要<code>hexo d</code> 具体命令使用参考<a href="https://hexo.io/docs/commands">Hexo命令文档</a>)</li><li><code>hexo s</code>   启动本地服务器</li></ol></li><li><p><strong>主题安装更换</strong></p><p>每个主题有不同要求，可在Hexo文档主题内挑选自己喜欢的主题后根据文档安装更换与配置</p><p><a href="https://hexo.io/themes/">Hexo主题文档</a></p></li><li><p><strong>写博客</strong></p><p>在项目文件内source&#x2F;_posts目录下新建md文件并在md文件内编写博客</p></li></ol><h1 id="二：部署网站"><a href="#二：部署网站" class="headerlink" title="二：部署网站"></a>二：部署网站</h1><p>部署到GitHub:</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo butterfly </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
